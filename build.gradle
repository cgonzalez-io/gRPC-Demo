plugins {
    id 'java'
    id "com.google.protobuf" version "0.8.18" apply true

}

description = "Protocol Buffers Socket Example"

repositories {
    mavenCentral()
}

repositories {
    flatDir {
        dirs 'lib'
    }
}

// json and protobuf dependencies 
dependencies {
    implementation("io.grpc:grpc-stub:1.40.1")
    implementation(name: 'Registry', ext: 'jar')
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation 'io.grpc:grpc-netty-shaded:1.33.1'
    implementation 'io.grpc:grpc-protobuf:1.33.1'
    implementation 'io.grpc:grpc-stub:1.33.1'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.18.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.16'
    // https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.49.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
// host and port of registration node
def registryHost = "localhost" // for reaching the classes registry node use "ser321test.duckdns.org"
def protobufPort = 9000 // port where the protobuf registry runs on -- for reaching the classes registry node use 8080
def jsonPort = 9001 // port where the json registry runs on
def grpcPort = 9002 // port where the json registry runs on

// port and host of a service node
def servicePort = 8000 // port for the service node
def serviceHost = 'localhost' // host for the service node
def nodeName = "test" // Name of node to be registered

// for json and protobuf: port where service can be found (getService method)
def discoveryPort = 10000 // port where the node runs a registry thread for the registry to call getSerices

// Method to Echo in client
def message = "Hello you" // for the echo service in the node

def regOn = false
// if auto is true it will run the hardcoded example
def auto = false

// task reading in the arguments if any given, if not the default from above will be used
tasks.register('arguments') {
    if (project.hasProperty("nodeName")) {
        nodeName = project.getProperty("nodeName")
    }
    if (project.hasProperty("jsonPort")) {
        jsonPort = project.getProperty("jsonPort")
    }
    if (project.hasProperty("registryHost")) {
        registryHost = project.getProperty("registryHost")
    }
    if (project.hasProperty("grpcPort")) {
        grpcPort = project.getProperty("grpcPort")
    }
    if (project.hasProperty("protobufPort")) {
        protobufPort = project.getProperty("protobufPort")
    }
    if (project.hasProperty("servicePort")) {
        servicePort = project.getProperty("servicePort")
    }
    if (project.hasProperty("discoveryPort")) {
        discoveryPort = project.getProperty("discoveryPort")
    }
    if (project.hasProperty("message")) {
        message = project.getProperty("message")
    }
    if (project.hasProperty("serviceHost")) {
        serviceHost = project.getProperty("serviceHost")
    }
    if (project.hasProperty("regOn")) {
        regOn = project.getProperty("regOn")
    }
    if (project.hasProperty("auto")) {
        auto = project.getProperty("auto")
    }
}

// Task that runs the registry server
tasks.register('runRegistryServer', JavaExec) {
    group "registry"
    classpath = sourceSets.main.runtimeClasspath
    description = "Run Server"
    mainClass = 'registry.Server'
    // default args
    args protobufPort
    args jsonPort
    args grpcPort
}

// runs a test that creates some services that can be discovered
tasks.register('runDiscovery', JavaExec) {
    group "registry"
    classpath = sourceSets.main.runtimeClasspath
    description = "Run ProtoBuf Discovery"
    mainClass = 'test.DiscoveryServers'
}

// registers the json services created with runDiscovery
tasks.register('testJsonRegistration', JavaExec) {
    group "registry"
    classpath = sourceSets.main.runtimeClasspath
    description = "Run JSON Discovery"
    mainClass = 'test.TestJson'
}

// registers the protobuf services created with runDiscovery
tasks.register('testProtobufRegistration', JavaExec) {
    group "registry"
    classpath = sourceSets.main.runtimeClasspath
    description = "Run Protobuf Discovery"
    mainClass = 'test.TestProtobuf'
}

// ####### Client Server example with grpc

// runs a client which will run some commands on a node and also on the registration node
tasks.register('runClient', JavaExec) {
    dependsOn arguments
    classpath = sourceSets.main.runtimeClasspath
    description = "Run Client"
    mainClass = 'example.grpcclient.Client'
    standardInput = System.in
    // default args
    args serviceHost
    args servicePort
    args registryHost
    args grpcPort
    args message
    args regOn
    args auto
}

// runs a service node which already has the echo and joke service included
tasks.register('runNode', JavaExec) {
    dependsOn arguments
    classpath = sourceSets.main.runtimeClasspath
    description = "Run Server"
    mainClass = 'example.grpcclient.Node'
    // default args
    args registryHost
    args grpcPort
    args serviceHost
    args servicePort
    args nodeName
    args regOn
}


// How I ran it:
// ser321test.duckdns.org is my IP on the first AWS instance
// on AWS instance: 

// gradle runRegistryServer -PgrpcPort=8080

// On a different AWS instance (could be the same one though just different ports)
// gradle runNode -PnodeName="amehlhas" -PgrpcPort=8080 -PregistryHost="ser321test.duckdns.org" -PserviceHost="18.220.233.57" -PdiscoveryPort=8888 -PservicePort=8880

// on my local machine
//gradle runClientJava -PgrpcPort=8080 -PregistryHost="ser321test.duckdns.org" -PserviceHost="18.220.233.57" -PservicePort=8880